---
title: "Hranice dvou období pro porovnání"
description: |
  A short description of the post.
author:
  - name: Marek Prokop
    affiliation: "[PROKOP software s.r.o.](https://www.prokopsw.cz/cs)"
date: 2022-05-01
draft: true
---

```{r}
#| label: libs
#| message: false
library(tidyverse)
library(lubridate)

options(lubridate.week.start = 1)
```

Funkce

```{r funcs, include=FALSE}
```

## Operace s intervalem v lubridate

### Vytvoření intervalu

#### Mám datum od a do

```{r results='hold'}
interval(
  start = ymd("2022-01-01"),
  end = ymd("2022-03-15")
)

# nebo

interval("2022-01-01/2022-03-15")

# nebo

"2022-01-01" %--% "2022-03-15"
```

#### Mám počet dní a datum od

```{r}
as.interval(days(73), start = ymd("2022-01-01"))
```

#### Mám počet dní a datum do

```{r}
as.interval(-days(73), start = ymd("2022-03-15")) |> 
  int_flip()
```

#### Mám počet týdnů a datum od

```{r}
as.interval(weeks(10), start = ymd("2022-01-01"))
```

### Informace o intervalu

#### Počáteční datum

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  int_start()
```

#### Koncové datum

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  int_end()
```

#### Počet dní intervalu

```{r}
"2022-01-01" %--% "2022-03-15" / days()
```

#### Počet celých týdnů intervalu

```{r}
"2022-01-01" %--% "2022-03-15" %/% weeks()
```

#### Zbytek po odečtení všech celých týdnů

```{r}
"2022-01-01" %--% "2022-03-15" %% weeks() |> 
  as.period()
```


### Operace s intervalem

#### Posun intervalu o počet dní dopředu

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  int_shift(by = days(15))
```

#### Posun intervalu o počet týdnů dozadu

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  int_shift(by = weeks(-2))
```

#### Posun intervalu na jiné počáteční datum

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  as.duration() |> 
  as.interval(start = ymd("2022-01-10"))
```

#### Posun intervalu na jiné koncové datum

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  int_flip() |> 
  as.duration() |> 
  as.interval(start = ymd("2022-01-10")) |> 
  int_flip()
```

#### Zarovnání intervalu na dny v týdnu

Posunu interval dozadu tak, aby začínal pondělím.

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  (\(x) {
    as.duration(x) |> 
      as.interval(start = floor_date(int_start(x), "week"))
  })()
```

Posunu interval dopředu tak, aby začínal pondělím.

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  (\(x) {
    as.duration(x) |> 
      as.interval(start = ceiling_date(int_start(x), "week"))
  })()
```

Posunu interval dopředu tak, aby začínal středou.

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  (\(x) {
    as.duration(x) |> 
      as.interval(start = ceiling_date(int_start(x), "week") + days(2))
  })()
```

Posunu interval dopředu tak, aby končil nedělí.

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  (\(x) {
    int_flip(x) |> 
      as.duration() |> 
      as.interval(start = ceiling_date(int_end(x), "week") - days(1)) |> 
      int_flip()
  })()
```

Posunu interval dozadu tak, aby končil nedělí.

```{r}
"2022-01-01" %--% "2022-03-15" |> 
  (\(x) {
    int_flip(x) |> 
      as.duration() |> 
      as.interval(start = floor_date(int_end(x), "week") - days(1)) |> 
      int_flip()
  })()
```

Zkrátím interval tak, aby zahrnoval jen celé kalendářní týdny.

```{r}
"2022-01-01" %--% "2022-03-15" |>
  (\(x) {
    int_start(x) <- ceiling_date(int_start(x), "week")
    int_end(x) <- floor_date(int_end(x), "week") - days(1)
    x
  })()
```


## Mám pevně dané období od--do

Mám pevně dané období od--do, které se nesmí změnit. Vypadá například takhle:

```{r fig.asp=0.25}
date_from <- ymd("2022-01-17")
date_to <- ymd("2022-02-05")
base_interval <- interval(date_from, date_to)

plot_timeline(`základní období` = base_interval)
```

K němu teď budu hledat předcházející období podle různých zadání. Jediná neměnná podmínka je, že předcházející období musí mít stejnou délku (stejný počet dní).

### Těsně předcházející období

Hledám období těsně předcházející o stejné délce. Nic jiného mě nezajímá
 
```{r fig.asp=0.25}
previous_interval <- int_shift(
  base_interval, -as.period(base_interval, unit = "day") - days(1)
)

plot_timeline(
  `základní období` = base_interval,
  `předchozí období` = previous_interval
)
```
 
### Těsně předcházející, stejné dny v týdnu

Hledám období o stejné délce, co nejtěsněji předcházející, ale začínající (a tedy i končící) stejným dnem v týdnu.
 
```{r fig.asp=0.25}
previous_date_from <- date_from - ceiling((date_to - date_from + 1) / 7) * 7
previous_date_to <- previous_date_from + (date_to - date_from)

previous_interval <- int_shift(
  base_interval, -days(ceiling((base_interval %/% days(1) + 1) / 7) * 7)
)

plot_timeline(
  `základní období` = base_interval,
  `předchozí období` = previous_interval
)
```
 
### Přesně před rokem

Hledám přesně odpovídající období před rokem. Mělo by to řešit i přestupné roky.

```{r fig.asp=0.25}
previous_date_from <- date_from - years(1)
previous_date_to <- previous_date_from + (date_to - date_from)

plot_timeline(
  `základní období` = interval(date_from, date_to),
  `předchozí období` = interval(previous_date_from, previous_date_to),
  expx = expansion(add = 90)
)
```

Pro jistotu ještě test s přestupným rokem. Předchozí období začíná ve stejný měsíc a den, ale konec je o den posunutý, aby byla obě období stejně dlouhá.

```{r fig.asp=0.25}
leap_year_date_from <- ymd("2021-02-17")
leap_year_date_to <- ymd("2021-03-05")
previous_date_from <- leap_year_date_from - years(1)
previous_date_to <- previous_date_from + (leap_year_date_to - leap_year_date_from)

plot_timeline(
  `základní období` = interval(leap_year_date_from, leap_year_date_to),
  `předchozí období` = interval(previous_date_from, previous_date_to),
  expx = expansion(add = 90)
)
```


### Před rokem, stejné dny v týdnu

Hledám odpovídající období před rokem, které začíná a končí stejnými dny v týdnu.

```{r fig.asp=0.25}
previous_date_from <- date_from - years(1) + wday(date_from) - wday(date_from - years(1))
previous_date_to <- previous_date_from + (date_to - date_from)

plot_timeline(
  `základní období` = interval(date_from, date_to),
  `předchozí období` = interval(previous_date_from, previous_date_to),
  expx = expansion(add = 100)
)
```

## Mám časový rozsah a datum změny

Mám k dispozici data v rozsahu od `min_date` po `max_date` a dále znám datum určité změny `break_date`. Budu hledat období před a po změně splňující různé varianty zadání.

```{r fig.asp=0.25}
max_date <- ymd("2022-04-12")
min_date <- max_date - months(15)
break_date <- ymd("2021-09-19")

plot_timeline(
  rozsah = interval(min_date, max_date),
  min_max = c(min_date, max_date),
  break_date = break_date,
  expx = expansion(add = 10)
)
```

### Navazující období začínající stejným dnem v týdnu

```{r}

```


### Navazující období se stejným počtem celých týdnů

Hledám dvě co nejdelší a zároveň stejně dlouhá období tvořená celými kalendářními týdny (od pondělí do neděle), které se vejdou jak do intervalu `break_date`--`max_date`, tak do intervalu `min_date`--`break_date - 1`, a zároveň co nejtěsněji následují za sebou.

```{r fig.asp=0.25}
date_from <- ceiling_date(break_date, "week")
date_to <- floor_date(max_date, "week") - 1

previous_date_from <- date_from - ceiling((date_to - date_from + 1) / 7) * 7
previous_date_to <- previous_date_from + (date_to - date_from)

plot_timeline(
  `základní období` = interval(date_from, date_to),
  `předchozí období` = interval(previous_date_from, previous_date_to),
  min_max = c(min_date, max_date),
  break_date = break_date,
  expx = expansion(add = c(5, 5))
)
```


## Funkce

```{r funcs}
plot_timeline <- function(..., min_max = NULL, break_date = NULL, expx = expansion(add = 1)) {
  params <- list(...)
  df <- tibble(
    period = as_factor(names(params)),
    date_from = map(params, ~ as_date(int_start(.x))) |> simplify() |> as_date(),
    date_to = map(params, ~ as_date(int_end(.x))) |> simplify() |> as_date()
  )
  scale_x_breaks <- c(df$date_from, df$date_to)
  if (!is.null(min_max)) {
    scale_x_breaks <- c(scale_x_breaks, min_max)
  }
  if (!is.null(break_date)) {
    scale_x_breaks <- c(scale_x_breaks, break_date)
  }
  
  ggplot(df) +
  geom_segment(
    aes(x = date_from, xend = date_to, y = 0.3, yend = 0.3, color = period), 
    size = 4
  ) +
  geom_text(
    aes(
      x = date_from + (date_to - date_from) / 2, 
      y = 0.7, 
      label = paste0(
        period, ", ", date_to - date_from + 1, " dní\n",
        wday(date_from, label = TRUE, abbr = FALSE), " ", 
        format(date_from, "%x"),
        " až ", 
        wday(date_to, label = TRUE, abbr = FALSE), " ",
        format(date_to, "%x")
      ), 
      hjust = 0.5
    )
  ) +
  scale_colour_brewer(palette = "Pastel1") +
  scale_x_date(
    breaks = scale_x_breaks,
    labels = scale_x_breaks,
    limits = c(min(scale_x_breaks), max(scale_x_breaks)),
    guide = guide_axis(check.overlap = TRUE),
    expand = expx
  ) +
  scale_y_continuous(limits = c(0, 1)) +
  theme(
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(angle = 90, vjust = 0.5, size = 8),
    axis.ticks.y = element_blank(),
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "none"
  )
}
```
