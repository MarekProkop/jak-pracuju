---
title: "Detekce změny průměru v časové řadě"
description: |
  Ukážu, jak jde v R detekovat a hezky vykreslit významné změny průměru v časové řadě. Za příklad mi poslouží imprese ze Search Console.
author:
  - name: Marek Prokop
    affiliation: "[PROKOP software s.r.o.](https://www.prokopsw.cz/cs)"
date: 2022-05-16
image: "changepoint.png"
df-print: kable
---

Mám časovou řadu nějaké metriky. Chci zjistit, zda a případně kde se v ní nacházejí významné změny v průměru. Na to existuje mnoho metod a balíčků, viz např. [srovnání v dokumentci balíčku mcp](https://lindeloev.github.io/mcp/articles/packages.html). Další jde vygooglit třeba dotazem [change point detection in R](https://www.google.com/search?q=change+point+detection+in+R).

V tomto zápisku použiju balíček [changepoint](https://cran.r-project.org/web/packages/changepoint/changepoint.pdf). Nevím, jestli je pro moje účely nejvhodnější, ale používám ho a osvědčil se mi. Zkoušel jsem i jiné, které dávaly buď skoro stejné, nebo horší výsledky. Nicméně je možné, že jsem je neuměl správně nastavit, protože v dokumentaci mívají hodně matematiky, kterou jsem byl líný studovat.

Dále chci vykreslit graf, který změny v průměru hezky ukáže.

## Balíčky

```{r}
#| message: false
library(tidyverse)
library(changepoint)
```


## Vstupní data

Jako vstupní data použiju metriky Search Console jednoho webu s dimenzí `date`. Web je anonymní, ale jedná se o reálný případ, který jsem nedávno řešil pro klienta. Data jsem si předem stáhl a uložil do souboru, který teď jen načtu.

```{r}
sc_date <- read_rds("data-raw/sc_date.rds")
```

Data mají tuto strukturu:

```{r}
sc_date |> glimpse()
```

Zajímají mě imprese a ty se v čase vyvíjely takhle:

```{r}
sc_date |> 
  ggplot(aes(date, impressions)) +
  geom_line() +
  scale_x_date(date_breaks = "2 weeks")
```

## Nalezení změn v průměru

### Jedna změna

Samotné nalezení jedné změny v průměru je s balíčkem *changepoint* a jeho funkcí `cpt.mean` jednoduché. Stačí numerický vektor a spolehnout se na výchozí hodnoty parametrů.

```{r}
cpt_object <- cpt.mean(sc_date$impressions)
summary(cpt_object)
```

Výsledek jde i vykreslit základní funkcí `plot`.

```{r}
plot(cpt_object)
```

### Víc změn

Předešlý postup detekuje jen jednu (největší) změnu, ale co když chci detekovat víc změn? Aby funkce `cpt.mean` našla víc změn, je třeba nastavit několik parametrů. Postupoval jsem podle článku [Comparison of change point detection methods](https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/).

```{r}
cpt_object <- cpt.mean(
  data = sc_date$impressions,
  penalty = "AIC",
  method = "PELT",
  Q = 5,
  minseglen = 14
)
summary(cpt_object)
```

```{r}
plot(cpt_object)
```

## Hezčí výstupu

Nevýhoda je, že ve standardním výstupu jsou body změny identifikovány jen pořadovým číslem v časové řadě a graf je dost ošklivý. Chci určit přesná data a graf vykreslit balíčkem *ggplot2*.

### Dešifrování třídy `cpt`

Funkce `cpt.mean` vrací objekt třídy `cpt`. Vypadá takhle:

```{r}
cpt_object |> str()
```

Z toho mě zajímá počet change pointů, jejich pozice a průměry odpovídající segmentům mezi change pointy.

```{r}
length(cpt_object@cpts)
cpt_object@cpts[1:length(cpt_object@cpts)]
cpt_object@param.est$mean
```

Data, které odpovídají pozicím, najdu snadno:

```{r}
sc_date$date[cpt_object@cpts[1:length(cpt_object@cpts)]]
```

### cpt --> tibble

Z toho už dokážu sestavit funkci, která vrátí přehledný data frame segmentů.

```{r}
cpt_as_tibble <- function(cpt, dates) {
  cpt_dates <- dates[cpt@cpts[1:length(cpt@cpts) - 1]]
  tibble(
    start_date = c(min(dates), cpt_dates + 1),
    end_date = c(cpt_dates, max(dates)),
    value = cpt@param.est$mean
  )
}

cpt_as_tibble(cpt_object, sc_date$date)
```

### Graf pomocí `ggplot`

A teď již můžu vykreslit hezčí graf.

```{r}
cpt_plot <- function(cpt, dates) {
  segment <- cpt_as_tibble(cpt, dates)
  
  tibble(date = dates, value = as.numeric(cpt_object@data.set)) |> 
    ggplot(aes(date, value)) +
    geom_line() +
    geom_segment(
      data = segment,
      aes(x = start_date, xend = end_date, y = value, yend = value), 
      color = "red"
    ) +
    scale_x_date(breaks = c(segment$start_date, max(dates)))
}

cpt_plot(cpt_object, sc_date$date)
```

Ještě ověřím, že funkce správně pracují i s jednou změnou.

```{r preview=TRUE}
cpt_plot(cpt.mean(sc_date$impressions), sc_date$date)
```

A to je všechno :-)
