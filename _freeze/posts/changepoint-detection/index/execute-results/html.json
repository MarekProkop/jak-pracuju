{
  "hash": "c82ee857a363bc8dfed0795f5e1fba65",
  "result": {
    "markdown": "---\ntitle: \"Detekce změny průměru v časové řadě\"\ndescription: |\n  Ukážu, jak jde v R detekovat a hezky vykreslit významné změny průměru v časové řadě. Za příklad mi poslouží imprese ze Search Console.\nauthor:\n  - name: Marek Prokop\n    affiliation: \"[PROKOP software s.r.o.](https://www.prokopsw.cz/cs)\"\ndate: 2022-05-16\nimage: \"changepoint.png\"\ndf-print: kable\n---\n\n\nMám časovou řadu nějaké metriky. Chci zjistit, zda a případně kde se v ní nacházejí významné změny v průměru. Na to existuje mnoho metod a balíčků, viz např. [srovnání v dokumentci balíčku mcp](https://lindeloev.github.io/mcp/articles/packages.html). Další jde vygooglit třeba dotazem [change point detection in R](https://www.google.com/search?q=change+point+detection+in+R).\n\nV tomto zápisku použiju balíček [changepoint](https://cran.r-project.org/web/packages/changepoint/changepoint.pdf). Nevím, jestli je pro moje účely nejvhodnější, ale používám ho a osvědčil se mi. Zkoušel jsem i jiné, které dávaly buď skoro stejné, nebo horší výsledky. Nicméně je možné, že jsem je neuměl správně nastavit, protože v dokumentaci mívají hodně matematiky, kterou jsem byl líný studovat.\n\nDále chci vykreslit graf, který změny v průměru hezky ukáže.\n\n## Balíčky\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(changepoint)\n```\n:::\n\n\n\n## Vstupní data\n\nJako vstupní data použiju metriky Search Console jednoho webu s dimenzí `date`. Web je anonymní, ale jedná se o reálný případ, který jsem nedávno řešil pro klienta. Data jsem si předem stáhl a uložil do souboru, který teď jen načtu.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_date <- read_rds(\"data-raw/sc_date.rds\")\n```\n:::\n\n\nData mají tuto strukturu:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_date |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 56\nColumns: 5\n$ date        <date> 2022-03-18, 2022-03-19, 2022-03-20, 2022-03-21, 2022-03-2…\n$ clicks      <int> 4428, 3285, 3693, 4420, 5505, 4060, 4035, 3374, 2944, 3017…\n$ impressions <int> 11825, 9857, 10523, 11969, 13918, 11034, 10891, 9586, 8807…\n$ ctr         <dbl> 0.3744609, 0.3332657, 0.3509455, 0.3692873, 0.3955310, 0.3…\n$ position    <dbl> 3.264355, 3.439992, 3.623776, 3.236193, 3.121354, 3.589179…\n```\n:::\n:::\n\n\nZajímají mě imprese a ty se v čase vyvíjely takhle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_date |> \n  ggplot(aes(date, impressions)) +\n  geom_line() +\n  scale_x_date(date_breaks = \"2 weeks\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Nalezení změn v průměru\n\n### Jedna změna\n\nSamotné nalezení jedné změny v průměru je s balíčkem *changepoint* a jeho funkcí `cpt.mean` jednoduché. Stačí numerický vektor a spolehnout se na výchozí hodnoty parametrů.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpt_object <- cpt.mean(sc_date$impressions)\nsummary(cpt_object)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCreated Using changepoint version 2.2.4 \nChangepoint type      : Change in mean \nMethod of analysis    : AMOC \nTest Statistic  : Normal \nType of penalty       : MBIC with value, 12.07606 \nMinimum Segment Length : 1 \nMaximum no. of cpts   : 1 \nChangepoint Locations : 35 \n```\n:::\n:::\n\n\nVýsledek jde i vykreslit základní funkcí `plot`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cpt_object)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Víc změn\n\nPředešlý postup detekuje jen jednu (největší) změnu, ale co když chci detekovat víc změn? Aby funkce `cpt.mean` našla víc změn, je třeba nastavit několik parametrů. Postupoval jsem podle článku [Comparison of change point detection methods](https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpt_object <- cpt.mean(\n  data = sc_date$impressions,\n  penalty = \"AIC\",\n  method = \"PELT\",\n  Q = 5,\n  minseglen = 14\n)\nsummary(cpt_object)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCreated Using changepoint version 2.2.4 \nChangepoint type      : Change in mean \nMethod of analysis    : PELT \nTest Statistic  : Normal \nType of penalty       : AIC with value, 4 \nMinimum Segment Length : 14 \nMaximum no. of cpts   : Inf \nChangepoint Locations : 17 35 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cpt_object)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Hezčí výstupu\n\nNevýhoda je, že ve standardním výstupu jsou body změny identifikovány jen pořadovým číslem v časové řadě a graf je dost ošklivý. Chci určit přesná data a graf vykreslit balíčkem *ggplot2*.\n\n### Dešifrování třídy `cpt`\n\nFunkce `cpt.mean` vrací objekt třídy `cpt`. Vypadá takhle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpt_object |> str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFormal class 'cpt' [package \"changepoint\"] with 12 slots\n  ..@ data.set : Time-Series [1:56] from 1 to 56: 11825 9857 10523 11969 13918 11034 10891 9586 8807 8864 ...\n  ..@ cpttype  : chr \"mean\"\n  ..@ method   : chr \"PELT\"\n  ..@ test.stat: chr \"Normal\"\n  ..@ pen.type : chr \"AIC\"\n  ..@ pen.value: num 4\n  ..@ minseglen: num 14\n  ..@ cpts     : int [1:3] 17 35 56\n  ..@ ncpts.max: num Inf\n  ..@ param.est:List of 1\n  .. ..$ mean: num [1:3] 10864 11794 10140\n  ..@ date     : chr \"Thu Feb 16 04:18:49 2023\"\n  ..@ version  : chr \"2.2.4\"\n```\n:::\n:::\n\n\nZ toho mě zajímá počet change pointů, jejich pozice a průměry odpovídající segmentům mezi change pointy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(cpt_object@cpts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ncpt_object@cpts[1:length(cpt_object@cpts)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17 35 56\n```\n:::\n\n```{.r .cell-code}\ncpt_object@param.est$mean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10864.41 11794.50 10139.90\n```\n:::\n:::\n\n\nData, které odpovídají pozicím, najdu snadno:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_date$date[cpt_object@cpts[1:length(cpt_object@cpts)]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-04-03\" \"2022-04-21\" \"2022-05-12\"\n```\n:::\n:::\n\n\n### cpt --> tibble\n\nZ toho už dokážu sestavit funkci, která vrátí přehledný data frame segmentů.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpt_as_tibble <- function(cpt, dates) {\n  cpt_dates <- dates[cpt@cpts[1:length(cpt@cpts) - 1]]\n  tibble(\n    start_date = c(min(dates), cpt_dates + 1),\n    end_date = c(cpt_dates, max(dates)),\n    value = cpt@param.est$mean\n  )\n}\n\ncpt_as_tibble(cpt_object, sc_date$date)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|start_date |end_date   |    value|\n|:----------|:----------|--------:|\n|2022-03-18 |2022-04-03 | 10864.41|\n|2022-04-04 |2022-04-21 | 11794.50|\n|2022-04-22 |2022-05-12 | 10139.90|\n\n</div>\n:::\n:::\n\n\n### Graf pomocí `ggplot`\n\nA teď již můžu vykreslit hezčí graf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpt_plot <- function(cpt, dates) {\n  segment <- cpt_as_tibble(cpt, dates)\n  \n  tibble(date = dates, value = as.numeric(cpt_object@data.set)) |> \n    ggplot(aes(date, value)) +\n    geom_line() +\n    geom_segment(\n      data = segment,\n      aes(x = start_date, xend = end_date, y = value, yend = value), \n      color = \"red\"\n    ) +\n    scale_x_date(breaks = c(segment$start_date, max(dates)))\n}\n\ncpt_plot(cpt_object, sc_date$date)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nJeště ověřím, že funkce správně pracují i s jednou změnou.\n\n\n::: {.cell preview='true'}\n\n```{.r .cell-code}\ncpt_plot(cpt.mean(sc_date$impressions), sc_date$date)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nA to je všechno :-)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}