{
  "hash": "553a08df2820d964c3329643a63ed3ec",
  "result": {
    "markdown": "---\ntitle: \"Analýza struktury většího počtu URL\"\ndescription: |\n  Když dostanu do ruky nový web, zajímá mě z jakých URL se skládá. Postupy popsané v tomhle zápisku mi to pomáhají zjistit a přehledně zobrazit.\nauthor:\n  - name: Marek Prokop\n    affiliation: \"[PROKOP software s.r.o.](https://www.prokopsw.cz/cs)\"\ndate: 2023-02-23\ndate-format: \"D. M. YYYY\"\n---\n\n\n## Zadání\n\nV dataframu, typicky třeba ze Screaming Frogu nebo Search Console, mám proměnnou obsahující URL. Chci přehledně zobrazit, z jakých částí se tato URL skládají.\n\n## Co na to potřebuju\n\nKromě obligátní *tidyverse* mi pomůže balíček [urltools](https://cran.r-project.org/web/packages/urltools/index.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(urltools)\n```\n:::\n\n\n## Příklad vstupních dat\n\nPomocí ChatGPT jsem vygeneroval vzorek náhodných URL a uložil do souboru url.csv.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df <- read_csv(\"url.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 81 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): url\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nsample_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 81 × 1\n   url                                                           \n   <chr>                                                         \n 1 http://example.com/index.html                                 \n 2 https://blog.example.com/archive#february                     \n 3 http://example.net/about.html                                 \n 4 https://secure.example.org/search?q=keyword                   \n 5 http://example.com/products/item1.html                        \n 6 https://secure.example.com/login?return_url=/account/dashboard\n 7 http://example.net/news/2023/02/17/headline                   \n 8 https://shop.example.com/cart?item=12345                      \n 9 http://example.org/resources/guide.pdf                        \n10 https://login.example.com/                                    \n# … with 71 more rows\n```\n:::\n:::\n\n\n## Rozložení URL\n\nURL nejprve rozložím na jednotlivé části podle [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986). Zároveň přejmenuju některé sloupce tak, aby odpovídaly RFC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df <- read_csv(\"url.csv\") |> \n  bind_cols(url_parse(sample_df$url)) |> \n  rename(host = domain) |> \n  rename(query = parameter)\nsample_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 81 × 7\n   url                                    scheme host  port  path  query fragm…¹\n   <chr>                                  <chr>  <chr> <chr> <chr> <chr> <chr>  \n 1 http://example.com/index.html          http   exam… <NA>  inde… <NA>  <NA>   \n 2 https://blog.example.com/archive#febr… https  blog… <NA>  arch… <NA>  februa…\n 3 http://example.net/about.html          http   exam… <NA>  abou… <NA>  <NA>   \n 4 https://secure.example.org/search?q=k… https  secu… <NA>  sear… q=ke… <NA>   \n 5 http://example.com/products/item1.html http   exam… <NA>  prod… <NA>  <NA>   \n 6 https://secure.example.com/login?retu… https  secu… <NA>  login retu… <NA>   \n 7 http://example.net/news/2023/02/17/he… http   exam… <NA>  news… <NA>  <NA>   \n 8 https://shop.example.com/cart?item=12… https  shop… <NA>  cart  item… <NA>   \n 9 http://example.org/resources/guide.pdf http   exam… <NA>  reso… <NA>  <NA>   \n10 https://login.example.com/             https  logi… <NA>  <NA>  <NA>  <NA>   \n# … with 71 more rows, and abbreviated variable name ¹​fragment\n```\n:::\n:::\n\n\n## Statistika protokolů a hostnames\n\nZ rozložených dat už snadno spočítám jednotlivé složky. Pro vizualizaci použiju ggplot s geomem `geom_bar`, který automaticky ukazuje počty, takže není třeba používat funkce `count` nebo `n`. Aby byly grafy seřazené od nejvyššího počtu po nejnižší, použiju `fct_infreq` a případně `fct_rev` z balíčku [forcats](https://forcats.tidyverse.org/).\n\n### Protokoly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  ggplot(aes(x = scheme)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Hostnames\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  ggplot(aes(y = fct_rev(fct_infreq(host)))) +\n  geom_bar() +\n  labs(y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Jen domény druhého řádu\n\nDoménu druhého řádu vykousnu z hostname regulárním výrazem.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  transmute(domain = str_extract(host, \"[^.]+\\\\.[^.]+$\")) |> \n  ggplot(aes(x = fct_infreq(domain))) +\n  geom_bar() +\n  labs(x = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Rozložení cesty na složky\n\nNejprve musím zjistit maximální počet lomítek.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_level <- sample_df |> \n  mutate(level = str_count(path, \"/\") + 1) |> \n  pull(level) |> \n  max(na.rm = TRUE)\n```\n:::\n\n\nNyní rozložím cestu pomocí [tidyr::separate](https://tidyr.tidyverse.org/reference/separate.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  select(path) |> \n  separate(path, into = paste0(\"l\", 1:max_level), sep = \"/\", fill = \"right\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 81 × 5\n   l1         l2         l3    l4    l5      \n   <chr>      <chr>      <chr> <chr> <chr>   \n 1 index.html <NA>       <NA>  <NA>  <NA>    \n 2 archive    <NA>       <NA>  <NA>  <NA>    \n 3 about.html <NA>       <NA>  <NA>  <NA>    \n 4 search     <NA>       <NA>  <NA>  <NA>    \n 5 products   item1.html <NA>  <NA>  <NA>    \n 6 login      <NA>       <NA>  <NA>  <NA>    \n 7 news       2023       02    17    headline\n 8 cart       <NA>       <NA>  <NA>  <NA>    \n 9 resources  guide.pdf  <NA>  <NA>  <NA>    \n10 <NA>       <NA>       <NA>  <NA>  <NA>    \n# … with 71 more rows\n```\n:::\n:::\n\n\nPro rozloženou cestu už jde spočítat jakákoli statistika, např. nejčastější složky první úrovně.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  select(path) |> \n  separate(path, into = paste0(\"l\", 1:max_level), sep = \"/\", fill = \"right\") |> \n  count(l1) |> \n  drop_na() |> \n  slice_max(n, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   l1             n\n   <chr>      <int>\n 1 products      10\n 2 contact-us     6\n 3 about          5\n 4 account        5\n 5 login          5\n 6 news           5\n 7 services       5\n 8 blog           4\n 9 resources      4\n10 search         4\n```\n:::\n:::\n\n\n## Rozložení parametrů\n\nJednotlivé parametry jde získat funkcí `urltools::param_get`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  pull(url) |> \n  param_get() |> \n  slice_head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   color  item       q redirect         return_url size status\n1   <NA>  <NA>    <NA>     <NA>               <NA> <NA>   <NA>\n2   <NA>  <NA>    <NA>     <NA>               <NA> <NA>   <NA>\n3   <NA>  <NA>    <NA>     <NA>               <NA> <NA>   <NA>\n4   <NA>  <NA> keyword     <NA>               <NA> <NA>   <NA>\n5   <NA>  <NA>    <NA>     <NA>               <NA> <NA>   <NA>\n6   <NA>  <NA>    <NA>     <NA> /account/dashboard <NA>   <NA>\n7   <NA>  <NA>    <NA>     <NA>               <NA> <NA>   <NA>\n8   <NA> 12345    <NA>     <NA>               <NA> <NA>   <NA>\n9   <NA>  <NA>    <NA>     <NA>               <NA> <NA>   <NA>\n10  <NA>  <NA>    <NA>     <NA>               <NA> <NA>   <NA>\n```\n:::\n:::\n\n\nZískanou širokou tabulku lze pak převrátit na dlouhou a spočítat statistiku parametrů i jejich hodnot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  pull(url) |> \n  param_get() |> \n  pivot_longer(cols = everything()) |> \n  drop_na() |>\n  count(name, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  name           n\n  <chr>      <int>\n1 q              4\n2 status         3\n3 color          2\n4 item           2\n5 redirect       2\n6 return_url     2\n7 size           2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df |> \n  pull(url) |> \n  param_get() |> \n  pivot_longer(cols = everything()) |> \n  drop_na() |> \n  group_by(name) |> \n  summarise(\n    n = n(),\n    values = paste(unique(value), collapse = \", \")\n  ) |> \n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 3\n  name           n values                        \n  <chr>      <int> <chr>                         \n1 q              4 keyword                       \n2 status         3 shipped, pending, completed   \n3 color          2 red, blue                     \n4 item           2 12345, 67890                  \n5 redirect       2 /dashboard                    \n6 return_url     2 /account/dashboard, /dashboard\n7 size           2 medium, large                 \n```\n:::\n:::\n\n\nA to je všechno :-)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}